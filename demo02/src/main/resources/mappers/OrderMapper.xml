<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.demo02.dao.OrderMapper">
    <resultMap id="orderMap" type="org.demo02.entity.Order">
        <id property="id" column="id"/>
        <result property="orderNo" column="order_no"/>
        <result property="userId" column="user_id"/>
        <result property="concertId" column="concert_id"/>
        <result property="quantity" column="quantity"/>
        <result property="unitPrice" column="unit_price"/>
        <result property="totalAmount" column="total_amount"/>
        <result property="paymentMethod" column="payment_method"/>
        <result property="paymentStatus" column="payment_status"/>
        <result property="orderStatus" column="order_status"/>
        <result property="ticketStatus" column="ticket_status"/>
        <result property="qrCode" column="qr_code"/>
        <result property="seatInfo" column="seat_info"/>
        <result property="remark" column="remark"/>
        <result property="payTime" column="pay_time"/>
        <result property="useTime" column="use_time"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="concertTitle" column="concert_title"/>
    </resultMap>

    <insert id="insert" parameterType="org.demo02.entity.Order" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `order`
        (user_id, concert_id, quantity, unit_price, total_amount, seat_info, order_no, payment_status, order_status, ticket_status, create_time, update_time)
        VALUES
        (#{userId}, #{concertId}, #{quantity}, #{unitPrice}, #{totalAmount}, #{seatInfo}, #{orderNo}, #{paymentStatus}, #{orderStatus}, #{ticketStatus}, #{createTime}, #{updateTime})
    </insert>

    <delete id="deleteById" parameterType="long">
        DELETE FROM `order` WHERE id = #{id}
    </delete>

    <update id="update" parameterType="org.demo02.entity.Order">
        UPDATE `order`
        SET user_id = #{userId},
            concert_id = #{concertId},
            quantity = #{quantity},
            unit_price = #{unitPrice},
            total_amount = #{totalAmount},
            payment_method = #{paymentMethod},
            payment_status = #{paymentStatus},
            order_status = #{orderStatus},
            ticket_status = #{ticketStatus},
            qr_code = #{qrCode},
            seat_info = #{seatInfo},
            remark = #{remark},
            pay_time = #{payTime},
            use_time = #{useTime},
            update_time = #{updateTime}
        WHERE id = #{id}
    </update>

    <select id="findById" parameterType="long" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.id = #{id}
    </select>

    <select id="findByOrderNo" parameterType="string" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.order_no = #{orderNo}
    </select>

    <select id="findAll" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        ORDER BY o.id ASC
    </select>

    <select id="findByPage" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        ORDER BY o.id ASC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="findByUserId" parameterType="long" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.user_id = #{userId}
        ORDER BY o.id ASC
    </select>

    <select id="findByConcertId" parameterType="long" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.concert_id = #{concertId}
        ORDER BY o.id ASC
    </select>

    <select id="findByPaymentStatus" parameterType="string" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.payment_status = #{paymentStatus}
        ORDER BY o.id ASC
    </select>

    <select id="findByOrderStatus" parameterType="string" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.order_status = #{orderStatus}
        ORDER BY o.id ASC
    </select>

    <select id="findByTicketStatus" parameterType="string" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.ticket_status = #{ticketStatus}
        ORDER BY o.id ASC
    </select>

    <select id="findByPaymentMethod" parameterType="string" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.payment_method = #{paymentMethod}
        ORDER BY o.id ASC
    </select>

    <select id="findByTimeRange" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        WHERE o.create_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY o.id ASC
    </select>

    <select id="findByAmountRange" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        <where>
            <if test="minAmount != null">
                AND o.total_amount &gt;= #{minAmount}
            </if>
            <if test="maxAmount != null">
                AND o.total_amount &lt;= #{maxAmount}
            </if>
        </where>
        ORDER BY o.id ASC
    </select>

    <update id="updatePaymentStatus">
        UPDATE `order` 
        SET payment_status = #{paymentStatus}, 
            payment_method = #{paymentMethod},
            pay_time = #{payTime},
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <update id="updateOrderStatus">
        UPDATE `order` 
        SET order_status = #{orderStatus}, 
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <update id="updateTicketStatus">
        UPDATE `order` 
        SET ticket_status = #{ticketStatus}, 
            use_time = #{useTime},
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <select id="countTotal" resultType="int">
        SELECT COUNT(*) FROM `order`
    </select>

    <select id="countByUserId" parameterType="long" resultType="int">
        SELECT COUNT(*) FROM `order` WHERE user_id = #{userId}
    </select>

    <select id="countByConcertId" parameterType="long" resultType="int">
        SELECT COUNT(*) FROM `order` WHERE concert_id = #{concertId}
    </select>

    <select id="findByCondition" resultMap="orderMap">
        SELECT o.*, c.title AS concert_title
        FROM `order` o
        LEFT JOIN concert c ON o.concert_id = c.id
        <where>
            <if test="orderNo != null and orderNo != ''">
                AND o.order_no LIKE CONCAT('%', #{orderNo}, '%')
            </if>
            <if test="userId != null">
                AND o.user_id = #{userId}
            </if>
            <if test="concertId != null">
                AND o.concert_id = #{concertId}
            </if>
            <if test="paymentStatus != null and paymentStatus != ''">
                AND o.payment_status = #{paymentStatus}
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                AND o.order_status = #{orderStatus}
            </if>
        </where>
        ORDER BY o.id ASC
    </select>

    <select id="selectByPaymentStatus" resultType="org.demo02.entity.Order">
        SELECT * FROM `order` WHERE payment_status = #{paymentStatus}
    </select>
</mapper> 